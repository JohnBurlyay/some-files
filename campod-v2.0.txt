--@name CamPod-v2.59
--@author JohnBurlyay
--@shared
--@model models/jaanus/wiretool/wiretool_input.mdl
    
if SERVER then
    
    chip():setCollisionGroup(10)    
    
    net.receive("sendOnServer", function(str)
        Data = net.readTable()
        
        net.start("sendOnOwner")
        net.writeTable(Data)
        net.send(owner())
        
        --local clr = team.getColor(Data.ent:getTeam())
        --print("[b][ACP]: [c " .. clr[1] .. ", " .. clr[2] .. ", " .. clr[3] .. "]" .. Data.ent:getName() .. "[/c] pressed " .. "[/b][c 255, 100, 100]" .. KeyIndex[Data.key]) 
        
    end)
        
else
    
    if player() == owner() then
        
        Ver = "v2.59"
        
        print("[ACP][c 255, 155, 0]: loaded " .. Ver .. ". Press [ALT] to open/close menu. Last update: WallHack remake.")  
        print("[ACP][c 255, 155, 0]: Also updated map rendering.")  
        
        --other parameters
            Show = false
            WH = false
            KH = false
            MH = true
            KHprint = false
            AH = false
            Size = 15
            Enable = false
            Hold = 0
            Hold2 = 0
            Hold3 = 0
            Hold4 = 0
            Button = {}
            ButtonSize = 22
            
            KeyLog = {}
            
            FileName = "ACP-v2.txt"
            File = json.decode(file.read(FileName) or "[]")
            
            Ply = owner()
            
            p = File.p or Vector(0, 0)
            p2 = File.p2 or Vector(250, 0)
            p3 = File.p3 or Vector(400, 0)
            p4 = File.p4 or Vector(600, 0)
            Poser = Vector(0)
            Poser2 = Vector(0)
            Poser3 = Vector(0)
            Poser4 = Vector(0)
            
            CamPos = Ply:getEyePos()
            
            Font1 = render.createFont("Roboto", 256, 400, true)
            Mat1 = render.createMaterial("sprites/laserbeam")
                    
        --map hack basics
            Map = material.create("UnlitGeneric")
            Map:setTextureURL("$basetexture", "https://cdn.discordapp.com/attachments/904019402960302100/904027914281029682/map1k.png", function(_, _, _, _, layout)
                layout(0, 0, 512, 512)
            end)
            
            MapSize = File.mapsize or 300
            local x, y = render.getResolution()
            Resolution = Vector(x, y)
            DrawPos = p3
            local x, y = render.getResolution()
            scrnsize = {x = x, y = y}
            DrawedScale = File.mapzoom or 0.2
            
            Str = {"▲", "▼", "◆"}
        
        KeyIndex = {
            _37 = {str = "Pad_0", clr = Color(255, 255, 255)},
            _38 = {str = "Pad_1", clr = Color(255, 255, 255)},
            _39 = {str = "Pad_2", clr = Color(255, 255, 255)},
            _40 = {str = "Pad_3", clr = Color(255, 255, 255)},
            _41 = {str = "Pad_4", clr = Color(255, 255, 255)},
            _42 = {str = "Pad_5", clr = Color(255, 255, 255)},
            _43 = {str = "Pad_6", clr = Color(255, 255, 255)},
            _44 = {str = "Pad_7", clr = Color(255, 255, 255)},
            _45 = {str = "Pad_8", clr = Color(255, 255, 255)},
            _46 = {str = "Pad_9", clr = Color(255, 255, 255)},
            
            _47 = {str = "Pad_Divide", clr = Color(255, 255, 0)},
            _48 = {str = "Pad_Multiply", clr = Color(255, 255, 0)},
            _49 = {str = "Pad_Minus", clr = Color(255, 255, 0)},
            _50 = {str = "Pad_Plus", clr = Color(255, 255, 0)},
            _51 = {str = "Pad_Enter", clr = Color(255, 255, 0)},
            _52 = {str = "Pad_Decimal", clr = Color(255, 255, 0)},
            
            _53 = {str = "L_Bracket", clr = Color(255, 255, 255)},
            _54 = {str = "R_Bracket", clr = Color(255, 255, 255)},
            _55 = {str = "Semicolon", clr = Color(255, 255, 255)},
            _56 = {str = "Apostrophe", clr = Color(255, 255, 255)},
            _57 = {str = "BackQuote", clr = Color(255, 255, 255)},
            _58 = {str = "Key_Comma", clr = Color(255, 255, 255)},
            _59 = {str = "Key_Period", clr = Color(255, 255, 255)},
            _60 = {str = "Slash", clr = Color(255, 255, 255)},
            _61 = {str = "BackSlash", clr = Color(255, 255, 255)},
            _62 = {str = "Key -", clr = Color(255, 255, 255)},
            _63 = {str = "Key =", clr = Color(255, 255, 255)},
            _64 = {str = "Enter", clr = Color(255, 255, 255)},
            _65 = {str = "Space", clr = Color(255, 255, 255)},
            _66 = {str = "BackSpace", clr = Color(255, 255, 255)},
            _67 = {str = "Tab", clr = Color(255, 255, 255)},
            
            _68 = {str = "CapsLock", clr = Color(255, 255, 255)},
            _69 = {str = "NumLock", clr = Color(255, 255, 0)},
            
            _71 = {str = "ScrollLock", clr = Color(255, 255, 0)},
            _72 = {str = "Insert", clr = Color(255, 0, 0)},
            _73 = {str = "Delete", clr = Color(255, 0, 0)},
            _74 = {str = "Home", clr = Color(255, 0, 0)},
            _75 = {str = "End", clr = Color(255, 0, 0)},
            _76 = {str = "PageUp", clr = Color(255, 0, 0)},
            _77 = {str = "PageDown", clr = Color(255, 0, 0)},
            _78 = {str = "Break", clr = Color(255, 0, 0)},
            
            _92 = {str = "F1", clr = Color(255, 255, 255)},
            _93 = {str = "F2", clr = Color(255, 255, 255)},
            _94 = {str = "F3", clr = Color(255, 255, 255)},
            _95 = {str = "F4", clr = Color(255, 255, 255)},
            _96 = {str = "F5", clr = Color(255, 255, 0)},
            _97 = {str = "F6", clr = Color(255, 255, 0)},
            _98 = {str = "F7", clr = Color(255, 255, 0)},
            _99 = {str = "F8", clr = Color(255, 255, 0)},
            _100 = {str = "F9", clr = Color(255, 255, 0)},
            _101 = {str = "F10", clr = Color(255, 255, 0)},
            _102 = {str = "F11", clr = Color(255, 255, 0)},
            _103 = {str = "F12", clr = Color(255, 255, 0)},
            
            
        }
        
        fontMenu = render.createFont("Roboto", 25, 400, true)
        fontAnother = render.createFont("Roboto", 20, 400, true)
        fontKH = render.createFont("Roboto", 15, 400, true)
        fontMap = render.createFont("Roboto", 15, 400, true)
        fontScrn = render.createFont("Roboto", 50, 400, true)
        
        local function savePoses()
            local data = {p = p, p2 = p2, p3 = p3, p4 = p4, mapsize = MapSize, mapzoom = DrawedScale}
            file.write(FileName, json.encode(data))
        end
        
        local function resetStencil()
            render.setStencilWriteMask(0xFF)
            render.setStencilTestMask(0xFF)
            render.setStencilReferenceValue(0)
            render.setStencilCompareFunction(STENCIL.ALWAYS)
            render.setStencilPassOperation(STENCIL.KEEP)
            render.setStencilFailOperation(STENCIL.KEEP)
            render.setStencilZFailOperation(STENCIL.KEEP)
        end
        
        local function writeKey(data)
            
            local id = data.ent:getSteamID()
            
            --check for player exists in table
            if KeyLog[id] == nil then
                KeyLog[id] = {}
            end
            --check for specified KEYVALUE exists in table
            if KeyLog[id][KeyIndex[data.key].str] == nil then
                KeyLog[id][KeyIndex[data.key].str] = {num = 0, clr = KeyIndex[data.key].clr}
            end
            
            KeyLog[id][KeyIndex[data.key].str].num = KeyLog[id][KeyIndex[data.key].str].num + 1

        end
            
        net.receive("sendOnOwner", function(str)
            Data = net.readTable()
            
            if KHprint and KeyIndex[Data.key].clr != Color(255, 255, 255) then
                local clr = team.getColor(Data.ent:getTeam())
                local keyclr = KeyIndex[Data.key].clr
                print("[b][ACP]: [c " .. clr[1] .. ", " .. clr[2] .. ", " .. clr[3] .. "]" .. Data.ent:getName() .. "[/c] pressed " .. "[/b][c " .. keyclr[1] .. ", " .. keyclr[2] .. ", " .. keyclr[3] .. "]" .. KeyIndex[Data.key].str) 
            end
            
            writeKey(Data)
            
        end)

        
        hook.add("calcview", "camera", function(pos, ang, fov, znear, zfar)
            if Enable then
                --check for leaved player
                if Ply == nil or not Ply:isValid() then
                    Ply = owner() 
                end
                local view = {
                    origin = Ply:getEyePos() + Ply:getEyeTrace().Normal * (Ply == owner() and 0 or 14),
                    angles = Ply:getEyeAngles(),
                    fov = fov,
                    drawviewer = false   
                }
                return view
            end
        end)
        
        enableHud(nil, true)
        
        hook.add("PostDrawOpaqueRenderables", "", function() 
            if WH then
                local plys = find.allPlayers()
                for i = 1, #plys do
                    if plys[i] != owner() then
                        local pos = plys[i]:getPos()
                        local ang = plys[i]:getAngles()
                        local dist = plys[i]:getPos():getDistance(owner():getPos())
                        local obb = plys[i]:obbSize() / 2
                        
                        local m = plys[i]:getMatrix()
                        m:translate(Vector(0, 0, 125))
                        m:setAngles((eyePos() - m:getTranslation()):getAngle() + Angle(90, 0, 0))
                        m:rotate(Angle(0, 90, 0))
                        m:setScale(Vector(0.55, -0.55))
                        
                        render.pushMatrix(m)
                            local clr = team.getColor(plys[i]:getTeam())
                            render.setColor(Color(clr.r, clr.g, clr.b, -150 + dist / 5 > 255 and 255 or -150 + dist / 5))
                            render.setFont(Font1)
                            render.drawSimpleText(0, 0, plys[i]:getName(), 1, 1)
                        render.popMatrix()
                            
                        local m = plys[i]:getMatrix()
                        m:setAngles(Angle(ang.x, ang.y, 0))
                        render.pushMatrix(m)
                            render.setColor(team.getColor(plys[i]:getTeam()))
                            render.draw3DWireframeBox(Vector(), Angle(), Vector(-obb.x, -obb.y, 0), Vector(obb.x, obb.y, obb.z * 2))
                        render.popMatrix()
                        
                        render.setColor(Color(clr.r, clr.g, clr.b, 150))
                        render.setMaterial(Mat1)
                        render.draw3DBeam(plys[i]:getAttachment(plys[i]:lookupAttachment("eyes")) or Vector(), plys[i]:getEyeTrace().HitPos or Vector(), 1, -0.5, 0.5)
                    end
                end
            end
        end)
        
        hook.add("drawhud", "", function() 
            
            render.setFilterMin(1) 
            render.setFilterMag(1)
            
            if Show then
                
                local x, y = input.getCursorPos()
                local panelY = 148 + ButtonSize * #find.allPlayers()
                
                if Hold == 1 then
                    p = Vector(x, y) + Poser
                end
                
                --buttons
                    --dots
                        --1
                        Button[100] = Vector(x, y):withinAABox(Vector(p.x + 100, p.y + 35), Vector(p.x + 120, p.y + 55))
                        Button[101] = Vector(x, y):withinAABox(Vector(p.x + 100, p.y + 70), Vector(p.x + 120, p.y + 90))
                        Button[103] = Vector(x, y):withinAABox(Vector(p.x + 100, p.y + 105), Vector(p.x + 120, p.y + 125))
                        --2
                        Button[105] = Vector(x, y):withinAABox(Vector(p.x + 215, p.y + 105), Vector(p.x + 235, p.y + 125))
                        Button[106] = Vector(x, y):withinAABox(Vector(p.x + 215, p.y + 70), Vector(p.x + 235, p.y + 90))
                        Button[108] = Vector(x, y):withinAABox(Vector(p.x + 215, p.y + 35), Vector(p.x + 235, p.y + 55))
                    --headers
                    Button[102] = Vector(x, y):withinAABox(Vector(p.x + 0, p.y + 0), Vector(p.x + 250, p.y + 30))
                    Button[104] = Vector(x, y):withinAABox(Vector(p2.x + 0, p2.y + 0), Vector(p2.x + 150, p2.y + 44))
                    Button[107] = Vector(x, y):withinAABox(Vector(p3.x + 56, p3.y + 0), Vector(p3.x + MapSize - 55, p3.y + 30))
                    Button[109] = Vector(x, y):withinAABox(Vector(p4.x + 0, p4.y + 0), Vector(p4.x + 250, p4.y + 30))
                    --map buttons   
                    Button[201] = Vector(x, y):withinAABox(Vector(p3.x + 3, p3.y + 3), Vector(p3.x + 27, p3.y + 27))
                    Button[202] = Vector(x, y):withinAABox(Vector(p3.x + 29, p3.y + 3), Vector(p3.x + 53, p3.y + 27))
                    Button[204] = Vector(x, y):withinAABox(Vector(p3.x + MapSize - 53, p3.y + 3), Vector(p3.x + MapSize - 29, p3.y + 27))
                    Button[203] = Vector(x, y):withinAABox(Vector(p3.x + MapSize - 27, p3.y + 3), Vector(p3.x + MapSize - 3, p3.y + 27))
                    
                
                --base panel
                render.setFont(fontMenu)
                render.setColor(Color(55, 55, 55))
                render.drawRect(p.x, p.y, 250, panelY)
                render.setColor(Color(0, 125, 255))
                render.drawRectOutline(p.x, p.y, 250, panelY, 1)
                render.setColor(Color(155, 255, 155))
                render.drawText(p.x + 125, p.y + 5, "[AdvancedCamPod] " .. Ver, 1)
                --cam funcs draw
                render.setFont(fontAnother)
                render.setColor(Color(155, 255, 255))
                render.drawText(p.x + 15, p.y + 35, "CamHack", 0)
                render.setColor(Color(200, 200, 200))
                render.drawRect(p.x + 100, p.y + 35, 20, 20)
                if Enable then
                    render.setColor(Color(0, 0, 0))
                    render.drawRect(p.x + 102, p.y + 37, 16, 16)
                end
                --wh funcs draw
                render.setColor(Color(155, 255, 255))
                render.drawText(p.x + 15, p.y + 70, "WallHack", 0)
                render.setColor(Color(200, 200, 200))
                render.drawRect(p.x + 100, p.y + 70, 20, 20)
                if WH then
                    render.setColor(Color(0, 0, 0))
                    render.drawRect(p.x + 102, p.y + 72, 16, 16)
                end
                --key hack funcs draw
                render.setColor(Color(155, 255, 255))
                render.drawText(p.x + 15, p.y + 105, "KeyHack", 0)
                render.setColor(Color(200, 200, 200))
                render.drawRect(p.x + 100, p.y + 105, 20, 20)
                if KH then
                    render.setColor(Color(0, 0, 0))
                    render.drawRect(p.x + 102, p.y + 107, 16, 16)
                end
                --key hack print draw
                render.setColor(Color(155, 255, 255))
                render.drawText(p.x + 135, p.y + 105, "print Keys", 0)
                render.setColor(Color(200, 200, 200))
                render.drawRect(p.x + 215, p.y + 105, 20, 20)
                if KHprint then
                    render.setColor(Color(0, 0, 0))
                    render.drawRect(p.x + 217, p.y + 107, 16, 16)
                end
                --mh funcs draw
                render.setColor(Color(155, 255, 255))
                render.drawText(p.x + 135, p.y + 70, "MapHack", 0)
                render.setColor(Color(200, 200, 200))
                render.drawRect(p.x + 215, p.y + 70, 20, 20)
                if MH then
                    render.setColor(Color(0, 0, 0))
                    render.drawRect(p.x + 217, p.y + 72, 16, 16)
                end
                --armor/health funcs
                render.setColor(Color(155, 255, 255))
                render.drawText(p.x + 135, p.y + 35, "Armor", 0)
                render.setColor(Color(200, 200, 200))
                render.drawRect(p.x + 215, p.y + 35, 20, 20)
                if AH then
                    render.setColor(Color(0, 0, 0))
                    render.drawRect(p.x + 217, p.y + 37, 16, 16)
                end
                
                --plys list
                local plys = find.allPlayers()
                local pos = Vector(p.x, p.y + 120)
                render.setFont(fontAnother)
                for i = 1, #plys do
                    
                    Button[i] = Vector(x, y):withinAABox(Vector(pos.x + 5, pos.y + ButtonSize * i), Vector(pos.x + 245, pos.y + ButtonSize * i + ButtonSize - 2))
                    
                    render.setColor(Button[i] and Color(200, 200, 200) or Color(100, 100, 100))
                    render.drawRect(pos.x + 5, pos.y + ButtonSize * i, 240, ButtonSize - 2)
                    render.setColor(Button[i] and team.getColor(plys[i]:getTeam()) or Color(200, 200, 200))
                    render.drawText(p.x + 120, pos.y + ButtonSize * i, string.len(plys[i]:getName()) > 20 and (string.sub(plys[i]:getName(), 1, 25) .. "...") or plys[i]:getName(), 1)
                    
                end
            
            end
            
            --key hack active
            if KH then
                
                if Ply == nil or not Ply:isValid() then
                    Ply = owner() 
                end
                
                local panelY2 = 50 + (KeyLog[Ply:getSteamID()] != nil and table.count(KeyLog[Ply:getSteamID()]) or 0) * 16
                if Hold2 == 1 then
                    local x, y = input.getCursorPos()
                    p2 = Vector(x, y) + Poser2
                end
                
                render.setFont(fontMenu)
                render.setColor(Color(55, 55, 55))
                render.drawRect(p2.x, p2.y, 150, panelY2)
                render.setColor(Color(0, 125, 255))
                render.drawRectOutline(p2.x, p2.y, 150, panelY2, 1)
                render.setColor(Color(155, 255, 155))
                render.drawText(p2.x + 75, p2.y + 0, "pressed keys", 1)
                render.setColor(Color(155, 255, 255))
                render.drawText(p2.x + 75, p2.y + 20, string.sub(Ply:getName(), 1, 20), 1) 
                
                local id = Ply:getSteamID()
                render.setFont(fontAnother)
                --draw pressed keys if exists
                if KeyLog[id] != nil then
                    for i = 1, table.count(KeyLog[id]) do
                        local str = table.getKeys(KeyLog[id])[i]
                        local num = KeyLog[id][str].num
                        local clr = KeyLog[id][str].clr
                        
                        render.setColor(clr)
                        render.drawText(p2.x + 5, p2.y + 28 + i * 16, (str or nil) .. " : ", 0)
                        render.setColor(Color(255, 255, 100))
                        render.drawText(p2.x + 110, p2.y + 28 + i * 16, tostring(num), 0)
                        
                    end
                end
                
            end
            
            --map hack active
            if MH then
                
                    local x, y = input.getCursorPos()
                    
                    if Hold3 == 1 then
                        p3 = Vector(x, y) + Poser3
                    end
                    
                    DrawPos = p3
                --draw map
                    --setup stencil
                    resetStencil()
                    
                    render.setColor(Color(50, 200, 255))
                    render.drawFilledCircle(DrawPos.x + MapSize / 2, DrawPos.y + 30 + MapSize / 2, MapSize / 2)
                    
                    if Show then
                        render.setColor(Color(50, 50, 50))
                        render.drawRect(DrawPos.x, DrawPos.y + 30, MapSize, MapSize)
                        render.setColor(Color(50, 50, 50))
                        render.drawRect(DrawPos.x, DrawPos.y + 30, MapSize, MapSize)
                    end
                    
                    render.setStencilEnable(true)
                    render.setStencilReferenceValue(1)
                    render.setStencilCompareFunction(STENCIL.EQUAL)
                    render.setStencilFailOperation(STENCIL.REPLACE)
                    render.clearBuffersObeyStencil(128, 0, 255, 255, false)
                    render.clearStencil()
                    
                    --draw base cirlce
                    render.drawFilledCircle(DrawPos.x + MapSize / 2, DrawPos.y + 30 + MapSize / 2, MapSize / 2 - 2)
                    
                    local plypos = Vector(scrnsize.x, scrnsize.y) - (Ply:getPos() / 13248 * MapSize / 2):setZ(0) * Vector(-1, 1) / (MapSize * 2)             
                    
                    local mtx = Matrix()
                    mtx:setTranslation(Vector(DrawPos.x+ MapSize / 2, DrawPos.y + MapSize / 2 + 30, 0))
                    mtx:setAngles(Angle(0, Ply:getAngles()[2] - 90, 0))
                    
                    local imgposes = {
                        x1 = 0.25 + plypos.x - DrawedScale / 2,
                        y1 = 0.25 + plypos.y - DrawedScale / 2,
                        x2 = 0.25 + plypos.x + DrawedScale / 2,
                        y2 = 0.25 + plypos.y + DrawedScale / 2,    
                    }
                    
                    render.setColor(Color(255, 255, 255))
                    render.setMaterial(Map)
                    render.pushMatrix(mtx)
                        render.drawTexturedRectUV(-MapSize, -MapSize, MapSize * 2, MapSize * 2, imgposes.x1, imgposes.y1, imgposes.x2, imgposes.y2)
                    render.popMatrix()
                    render.setStencilEnable(false)
                    
                    if Show then
                        render.setColor(Color(50, 200, 255))
                        render.drawRectOutline(DrawPos.x, DrawPos.y + 30, MapSize, MapSize, 1)
                        render.setColor(Color(50, 50, 50))
                        render.drawRect(DrawPos.x, DrawPos.y, MapSize, 30)
                        render.setColor(Color(50, 200, 255))
                        render.drawRectOutline(DrawPos.x, DrawPos.y, MapSize, 30, 1)
                        
                        render.setFont(fontMenu)
                        render.setColor(Color(200, 200, 200))
                        render.drawRect(DrawPos.x + 3, DrawPos.y + 3, 24, 24)
                        render.drawRect(DrawPos.x + 29, DrawPos.y + 3, 24, 24)
                        render.setColor(Color(0, 0, 0))
                        render.drawText(DrawPos.x + 9, DrawPos.y + 2, "+", 0)
                        render.drawText(DrawPos.x + 35, DrawPos.y + 2, "-", 0)
                        render.setColor(Color(155, 255, 155))
                        render.drawText(DrawPos.x + 56, DrawPos.y + 2, "size", 0)
                        
                        render.setColor(Color(200, 200, 200))
                        render.drawRect(DrawPos.x + MapSize - 27, DrawPos.y + 3, 24, 24)
                        render.drawRect(DrawPos.x + MapSize - 53, DrawPos.y + 3, 24, 24)
                        render.setColor(Color(0, 0, 0))
                        render.drawText(DrawPos.x + MapSize - 21, DrawPos.y + 2, "-", 0)
                        render.drawText(DrawPos.x + MapSize - 47, DrawPos.y + 2, "+", 0)
                        render.setColor(Color(155, 255, 155))
                        render.drawText(DrawPos.x + MapSize - 55, DrawPos.y + 2, "zoom", 2)
                    end
                
                    --draw Me
                    render.setFont(fontMap)
                    render.setColor(Color(255, 255, 255))
                        local poly = {
                            {x=DrawPos.x + MapSize / 2 + 0, y=DrawPos.y + MapSize / 2 + 30 - 2},
                            {x=DrawPos.x + MapSize / 2 + 4, y=DrawPos.y + MapSize / 2 + 30 + 6},
                            {x=DrawPos.x + MapSize / 2 - 4, y=DrawPos.y + MapSize / 2 + 30 + 6}, 
                        }
                    render.drawPoly(poly)
                    render.setColor(team.getColor(Ply:getTeam()))
                    render.drawText(DrawPos.x + MapSize / 2 + 0, DrawPos.y + MapSize / 2 + 30 + 7, Ply:getName(), 1)
                    
                    local plys = find.allPlayers()
                    for i = 1, #plys do
                        if plys[i] != Ply then 
                            local dist = Ply:getPos():setZ(0):getDistance(plys[i]:getPos():setZ(0)) / 13248 * (MapSize / 2 / DrawedScale)
                            local ang = (Ply:getPos() - plys[i]:getPos()):getAngle().yaw - Ply:getAngles().yaw
                            local pos = Vector(DrawPos.x + MapSize / 2, DrawPos.y + MapSize / 2 + 30) + Vector(math.sin(math.rad(ang)), math.cos(math.rad(ang)), 0) * dist
                            local z 
                                if (Ply:getPos().z - plys[i]:getPos().z) > 100 then
                                    z = Str[2]
                                elseif (Ply:getPos().z - plys[i]:getPos().z) < -100 then
                                    z = Str[1]
                                else
                                    z = Str[3]
                                end
                            
                            if pos:withinAABox(Vector(DrawPos.x, DrawPos.y + 28), Vector(DrawPos.x + MapSize, DrawPos.y + MapSize + 30)) then
                            
                                render.setColor(team.getColor(plys[i]:getTeam()))
                                render.setFont(fontMap)
                                render.drawText(pos.x, pos.y - 2, z .. "\n" .. plys[i]:getName(), 1)
                                
                            end
                        end
                        
                    end

                    

            end
            
            --armor/health hack
            if AH then
                
                if Ply == nil or not Ply:isValid() then
                    Ply = owner() 
                end
                
                if Ply == owner() then return end
                
                if Hold4 == 1 then
                    local x, y = input.getCursorPos()
                    p4 = Vector(x, y) + Poser4
                end
                
                render.setFont(fontMenu)
                render.setColor(Color(55, 55, 55))
                render.drawRect(p4.x, p4.y, 250, 30)
                render.setColor(Color(0, 125, 255))
                render.drawRectOutline(p4.x, p4.y, 250, 30, 1)
                render.setColor(Color(255, 100, 100))
                render.drawText(p4.x + 2, p4.y + 2, "[HP]: " .. Ply:getHealth(), 0) 
                render.setColor(Color(100, 100, 255))
                render.drawText(p4.x + 248, p4.y + 2, " [AR]: " .. Ply:getArmor(), 2) 
              
            end
            
        end)
                
        hook.add("inputPressed", "", function(key)
            if key == 81 then
                
                Show = not Show
                input.enableCursor(Show)
                
            elseif key == 107 and Show then
                
                if Button[100] then
                    Enable = not Enable
                elseif Button[101] then
                    WH = not WH
                elseif Button[102] then
                    Hold = Hold + 1 
                    local x, y = input.getCursorPos()
                    Poser = p - Vector(x, y)
                elseif Button[104] then
                    Hold2 = Hold2 + 1 
                    local x, y = input.getCursorPos()
                    Poser2 = p2 - Vector(x, y)
                elseif Button[103] then
                    KH = not KH
                elseif Button[105] then
                    KHprint = not KHprint
                elseif Button[106] then
                    MH = not MH
                elseif Button[107] then
                    Hold3 = Hold3 + 1
                    local x, y = input.getCursorPos()
                    Poser3 = p3 - Vector(x, y) 
                elseif Button[108] then
                    AH = not AH
                elseif Button[109] then
                    Hold4 = Hold4 + 1
                    local x, y = input.getCursorPos()
                    Poser4 = p4 - Vector(x, y) 
                elseif Button[201] and MH then
                    MapSize = math.min(MapSize + 10, Resolution.y - 30)
                    savePoses()
                elseif Button[202] and MH then
                    MapSize = math.max(MapSize - 10, 250)
                    savePoses()
                elseif Button[203] and MH then
                    DrawedScale = math.min(DrawedScale + 0.01, 0.5)
                    savePoses()
                elseif Button[204] and MH then
                    DrawedScale = math.max(DrawedScale - 0.01, 0.1)
                    savePoses()
                else
                    local plys = find.allPlayers()
                    for i = 1, #plys do
                        if Button[i] then
                            Ply = plys[i]
                        end 
                    end
                    
                end
            end   
        end)
        hook.add("inputReleased", "", function(key)
            if key == 107 then
                Hold = 0
                Hold2 = 0
                Hold3 = 0
                Hold4 = 0
                savePoses()
                Poser = Vector(0)
            end
        end)
    else
        hook.add("inputPressed", "", function(key)
            if 
                (key > 36 and key < 70) or
                (key > 70 and key < 79) or
                (key > 91 and key < 104)
            then
                net.start("sendOnServer")
                net.writeTable({ent = player(), key = "_" .. tostring(key)})
                net.send(owner())
            end
        end)
    end
end
