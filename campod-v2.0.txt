--@name CamPod-v2.67c
--@author JohnBurlyay
--@shared
--@model models/jaanus/wiretool/wiretool_input.mdl

if SERVER then
    
    chip():setCollisionGroup(10)    
    
    Enable = false
    E = 0
    Ply = owner()
    O = owner()
    Pos = Vector(0, 0, 0)
    Team = owner():getTeam()
    
    Chair = prop.createSent(Vector(0), Angle(0, 0, 0), "Seat_Jeep", 1, {})     
    Chair:setColor(Color(0, 0, 0, 0))
    Chair:setCollisionGroup(10)
    
    net.receive("sendOnServer", function(str)
        Data = net.readTable()
        net.start("sendOnOwner")
        net.writeTable(Data)
        net.send(owner())
    end)
    
    net.receive("enable", function(str)
        Data = net.readTable()
        if Data.enable != nil then
            Enable = Data.enable
            
            if Enable == false then
                Chair:setPos(Pos)
                Chair:ejectDriver()
                Chair:setPos(Vector(0))
            elseif Enable == true then
                Pos = O:getPos() 
                Chair:use(1, 0)
            end
        end
        if Data.entity != nil then
            Ply = Data.entity
            local Model = Ply:getViewModel():getModel()
            if Model then
                net.start("setModel")
                net.writeString(string.replace(Model or "", "c_", "v_"))
                net.send(owner())
            end
        end
    end)
    
    net.receive("e", function(str)
        E = net.readTable().e
    end)
    
    hook.add("think", "", function()
        if Enable == true then
            if Chair:getPos() != Vector(0) then
                Chair:setPos(Vector(0))
            end
        end
    end)
    
    hook.add("PlayerSwitchWeapon", "", function(ply)
        if ply == Ply then
            if not timer.exists("weapon " .. ply:getSteamID()) then
                timer.create("weapon", 0.25, 1, function()
                    local Model = Ply:getViewModel():getModel()
                    if Model then
                        net.start("setModel")
                        net.writeString(string.replace(Model or "", "c_", "v_"))
                        net.send(owner())
                    end
                end)
            else
                timer.start("weapon " .. ply:getSteamID())
            end
        end
    end)
    
    hook.add("Removed", "", function()
        if Enable then
            Chair:setPos(Pos)
            Chair:ejectDriver()
            Chair:setPos(Vector(0))
        end
    end)
    
else
    
    if player() == owner() then
                
        --other parameters
            Show = false
            WH = false
            KH = false
            MH = false
            KHprint = false
            AH = false
            Size = 15
            Enable = false
            OpenWHsettings = false
            OpenCAMsettings = false
            Hold = 0
            Hold2 = 0
            Hold3 = 0
            Hold4 = 0
            Button = {}
            ButtonSize = 22
            OpenGlobalSettings = false
            ChangeMenuKey = false
            
            KeyLog = {}
            
            FileName = "ACP-v2.txt"
            File = json.decode(file.read(FileName) or "[]")
            
            Ply = owner()
            
            p = File.p or Vector(0, 0)
            p2 = File.p2 or Vector(250, 0)
            p3 = File.p3 or Vector(400, 0)
            p4 = File.p4 or Vector(600, 0)
            Poser = Vector(0)
            Poser2 = Vector(0)
            Poser3 = Vector(0)
            Poser4 = Vector(0)
            
            WHname = File.whname or false
            WHbox = File.whbox or false
            WHbeam = File.whbeam or false
            WHbox2D = File.whbox2d or false
            
            TransparentWeapon = File.transparentweapon or false
            
            Range = File.range or 0
            FOV = File.fov or 90
            
            MenuKey = File.menukey or 81
            
            CamPos = Ply:getEyePos()
            
            Font1 = render.createFont("Roboto", 256, 400, true)
            FontName = render.createFont("Roboto", 20, 400, true)
            Mat1 = render.createMaterial("sprites/laserbeam")
            
            BaseBlueColor = Color(25, 140, 220)
            
            BaseView = holograms.create(Vector(), Angle(),"models/holograms/cube.mdl")
            BaseView:setColor(Color(255, 255, 255, 0))    
            BaseView:setAnimation("idle", nil, nil)
            
            Ver = "v2.67c"
            print("[ACP][c 255, 155, 0]: loaded " .. Ver .. ". Press [" .. input.getKeyName(MenuKey) .. "] to open/close menu. Last update: fixed some crush hyacks.")  
            
        function loadTextures() 
            Map = material.create("UnlitGeneric")
            MapSkin = material.create("UnlitGeneric")
            Map:setTextureURL("$basetexture", "https://cdn.discordapp.com/attachments/904019402960302100/904027914281029682/map1k.png", function(_, _, _, _, layout)
                if layout then
                    layout(0, 0, 512, 512)
                else
                    Map = material.createFromImage("spawnicons/models/maxofs2d/logo_gmod_b.png", "")
                    print("[ACP][c 255, 0, 0]: error loading Map texture!")
                end
            end)
            MapSkin:setTextureURL("$basetexture", "https://cdn.discordapp.com/attachments/1076105846473359360/1076105896112963614/mapskin.png", function(_, _, _, _, layout)
                if layout then
                    layout(0, 0, 512, 512)
                else
                    MapSkin = material.createFromImage("spawnicons/models/maxofs2d/logo_gmod_b.png", "")
                    print("[ACP][c 255, 0, 0]: error loading menu texture!")
                end
            end)
        end
        
        --map hack basics
            loadTextures()
            
            MapSize = File.mapsize or 300
            local x, y = render.getResolution()
            Resolution = Vector(x, y)
            DrawPos = p3
            local x, y = render.getResolution()
            scrnsize = {x = x, y = y}
            DrawedScale = File.mapzoom or 0.2
            
            Str = {"▲", "▼", "◆"}
        
        KeyIndex = {
            _37 = {str = "Pad_0", clr = Color(255, 255, 255)},
            _38 = {str = "Pad_1", clr = Color(255, 255, 255)},
            _39 = {str = "Pad_2", clr = Color(255, 255, 255)},
            _40 = {str = "Pad_3", clr = Color(255, 255, 255)},
            _41 = {str = "Pad_4", clr = Color(255, 255, 255)},
            _42 = {str = "Pad_5", clr = Color(255, 255, 255)},
            _43 = {str = "Pad_6", clr = Color(255, 255, 255)},
            _44 = {str = "Pad_7", clr = Color(255, 255, 255)},
            _45 = {str = "Pad_8", clr = Color(255, 255, 255)},
            _46 = {str = "Pad_9", clr = Color(255, 255, 255)},
            
            _47 = {str = "Pad_Divide", clr = Color(255, 255, 0)},
            _48 = {str = "Pad_Multiply", clr = Color(255, 255, 0)},
            _49 = {str = "Pad_Minus", clr = Color(255, 255, 0)},
            _50 = {str = "Pad_Plus", clr = Color(255, 255, 0)},
            _51 = {str = "Pad_Enter", clr = Color(255, 255, 0)},
            _52 = {str = "Pad_Decimal", clr = Color(255, 255, 0)},
            
            _53 = {str = "L_Bracket", clr = Color(255, 255, 255)},
            _54 = {str = "R_Bracket", clr = Color(255, 255, 255)},
            _55 = {str = "Semicolon", clr = Color(255, 255, 255)},
            _56 = {str = "Apostrophe", clr = Color(255, 255, 255)},
            _57 = {str = "BackQuote", clr = Color(255, 255, 255)},
            _58 = {str = "Key_Comma", clr = Color(255, 255, 255)},
            _59 = {str = "Key_Period", clr = Color(255, 255, 255)},
            _60 = {str = "Slash", clr = Color(255, 255, 255)},
            _61 = {str = "BackSlash", clr = Color(255, 255, 255)},
            _62 = {str = "Key -", clr = Color(255, 255, 255)},
            _63 = {str = "Key =", clr = Color(255, 255, 255)},
            _64 = {str = "Enter", clr = Color(255, 255, 255)},
            _65 = {str = "Space", clr = Color(255, 255, 255)},
            _66 = {str = "BackSpace", clr = Color(255, 255, 255)},
            _67 = {str = "Tab", clr = Color(255, 255, 255)},
            
            _68 = {str = "CapsLock", clr = Color(255, 255, 255)},
            _69 = {str = "NumLock", clr = Color(255, 255, 0)},
            
            _71 = {str = "ScrollLock", clr = Color(255, 255, 0)},
            _72 = {str = "Insert", clr = Color(255, 0, 0)},
            _73 = {str = "Delete", clr = Color(255, 0, 0)},
            _74 = {str = "Home", clr = Color(255, 0, 0)},
            _75 = {str = "End", clr = Color(255, 0, 0)},
            _76 = {str = "PageUp", clr = Color(255, 255, 255)},
            _77 = {str = "PageDown", clr = Color(255, 255, 255)},
            _78 = {str = "Break", clr = Color(255, 0, 0)},
            
            _92 = {str = "F1", clr = Color(255, 255, 255)},
            _93 = {str = "F2", clr = Color(255, 255, 255)},
            _94 = {str = "F3", clr = Color(255, 255, 255)},
            _95 = {str = "F4", clr = Color(255, 255, 255)},
            _96 = {str = "F5", clr = Color(255, 255, 0)},
            _97 = {str = "F6", clr = Color(255, 255, 0)},
            _98 = {str = "F7", clr = Color(255, 255, 0)},
            _99 = {str = "F8", clr = Color(255, 255, 0)},
            _100 = {str = "F9", clr = Color(255, 255, 0)},
            _101 = {str = "F10", clr = Color(255, 255, 0)},
            _102 = {str = "F11", clr = Color(255, 255, 0)},
            _103 = {str = "F12", clr = Color(255, 255, 0)},
            
            
        }
        
        fontMenu = render.createFont("Roboto", 25, 400, true)
        fontAnother = render.createFont("Roboto", 20, 400, true)
        fontKH = render.createFont("Roboto", 15, 400, true)
        fontMap = render.createFont("Roboto", 15, 400, true)
        fontScrn = render.createFont("Roboto", 50, 400, true)
        
        local function savePoses()
            local data = {
                p = p, p2 = p2, p3 = p3, p4 = p4, 
                mapsize = MapSize, 
                mapzoom = DrawedScale,
                whname = WHname, whbox = WHbox, whbeam = WHbeam, whbox2d = WHbox2D,
                transparentweapon = TransparentWeapon,
                range = Range,
                fov = FOV,
                menukey = MenuKey,
            }
            file.write(FileName, json.encode(data))
        end
        
        local function resetStencil()
            render.setStencilWriteMask(0xFF)
            render.setStencilTestMask(0xFF)
            render.setStencilReferenceValue(0)
            render.setStencilCompareFunction(STENCIL.ALWAYS)
            render.setStencilPassOperation(STENCIL.KEEP)
            render.setStencilFailOperation(STENCIL.KEEP)
            render.setStencilZFailOperation(STENCIL.KEEP)
        end
        
        local function writeKey(data)
            if data.ent then
                local id = data.ent:getSteamID()
                
                --check for player exists in table
                if KeyLog[id] == nil then
                    KeyLog[id] = {}
                end
                --check for specified KEYVALUE exists in table
                if KeyLog[id][KeyIndex[data.key].str] == nil then
                    KeyLog[id][KeyIndex[data.key].str] = {num = 0, clr = KeyIndex[data.key].clr}
                end
                
                KeyLog[id][KeyIndex[data.key].str].num = KeyLog[id][KeyIndex[data.key].str].num + 1
            end
        end
        
        local function quotaCheck(n)
            return math.max(quotaAverage(), quotaUsed()) < quotaMax()*n
        end
            
        net.receive("sendOnOwner", function(str)
            Data = net.readTable()
            
            if KHprint and KeyIndex[Data.key].clr != Color(255, 255, 255) then
                local clr = team.getColor(Data.ent:getTeam())
                local keyclr = KeyIndex[Data.key].clr
                print("[b][ACP]: [c " .. clr[1] .. ", " .. clr[2] .. ", " .. clr[3] .. "]" .. Data.ent:getName() .. "[/c] pressed " .. "[/b][c " .. keyclr[1] .. ", " .. keyclr[2] .. ", " .. keyclr[3] .. "]" .. KeyIndex[Data.key].str) 
            end
            
            writeKey(Data)
            
        end)
        
        net.receive("setModel", function(str)
            try(
                BaseView:setModel(net.readString() or "models/props_junk/PopCan01a.mdl"),
                nil
            )
        end)
            
        hook.add("calcview", "camera", function(pos, ang, fov, znear, zfar)
            if Enable then
                --check for leaved player
                if Ply == nil or not Ply:isValid() then
                    Ply = owner()
                end
                if Ply == owner() then return end
                
                local EyePos = Ply:getEyePos()
                local EyeAng = Ply:getEyeAngles()
                local Weapon = Ply:getActiveWeapon()
                             
                local view = {
                    origin = EyePos + Ply:getEyeTrace().Normal * Range,
                    angles = EyeAng,
                    fov = FOV,
                    drawviewer = true   
                }        
                
                if Weapon:isValid() then Weapon:setColor(Color(255, 255, 255, 0)) end
                
                Ply:setColor(Color(0, 0, 0, 0))
                if Ply:isAlive() then
                    BaseView:setColor(Color(255, 255, 255, TransparentWeapon == true and 150 or 255)) 
                else 
                    BaseView:setColor(Color(255, 255, 255, 0)) 
                end
                
                BaseView:setPos(EyePos) 
                BaseView:setAngles(EyeAng)
                                            
                return view
            else
                BaseView:setColor(Color(255, 255, 255, 0)) 
                if Ply and Ply:isValid() then
                    Ply:setColor(Color(255, 255, 255, 255))
                end
                if Ply:getActiveWeapon():isValid() then Ply:getActiveWeapon():setColor(Color(255, 255, 255, 255)) end
            end
        end)
            
        enableHud(nil, true)
        
        hook.add("PostDrawOpaqueRenderables", "", function() 
            if WH and quotaCheck(0.95) then
                local plys = find.allPlayers()
                if Ply == nil then Ply = owner() end
                for i = 1, #plys do
                    if 
                        (Enable and plys[i] != Ply)
                            or
                        (not Enable and plys[i] != owner())
                    then
                        local O = Enable == false and owner() or Ply
                        local pos = plys[i]:getPos()
                        local ang = plys[i]:getAngles()
                        local dist = plys[i]:getPos():getDistance(O:getPos())
                        local obb = plys[i]:obbSize() / 2
                        local clr = team.getColor(plys[i]:getTeam())
                        
                        local m = plys[i]:getMatrix()
                        m:translate(Vector(0, 0, 125))
                        m:setAngles((O:getEyePos() - m:getTranslation()):getAngle() + Angle(90, 0, 0))
                        m:rotate(Angle(0, 90, 0))
                        m:setScale(Vector(0.55, -0.55))
                        
                        if WHbox then
                            local m = plys[i]:getMatrix()
                            m:setAngles(Angle(ang.x, ang.y, 0))
                            render.pushMatrix(m)
                                render.setColor(team.getColor(plys[i]:getTeam()))
                                render.draw3DWireframeBox(Vector(), Angle(0, plys[i]:getEyeAngles()[2], 0), Vector(-obb.x, -obb.y, 0), Vector(obb.x, obb.y, plys[i]:inVehicle() and obb.z or obb.z * 2))
                            render.popMatrix()
                        end
                        if WHbeam then
                            render.setColor(Color(clr.r, clr.g, clr.b, 150))
                            render.setMaterial(Mat1)
                            render.draw3DBeam(plys[i]:getAttachment(plys[i]:lookupAttachment("eyes")) or Vector(), plys[i]:getEyeTrace().HitPos or Vector(), 1, -0.5, 0.5)
                        end
                    end
                end
            end
        end)
        
        hook.add("drawhud", "", function() 
            
            if not quotaCheck(0.95) then return end
            
            render.setFilterMin(1) 
            render.setFilterMag(1)
            
            if Show then
                
                local x, y = input.getCursorPos()
                local panelY = 183 + ButtonSize * #find.allPlayers()
                
                if Hold == 1 then
                    p = Vector(x, y) + Poser
                end
                
                local whsettingsY = 175
                local whpos = Vector(p.x + 250, p.y + 35)
                local campos = Vector(p.x + 250, p.y + 35 + whsettingsY)
                local globalset = Vector(p.x - 150, p.y + 35)
                
                --buttons
                    --dots
                        --1
                        Button[100] = Vector(x, y):withinAABox(Vector(p.x + 100, p.y + 35), Vector(p.x + 120, p.y + 55))
                        Button[101] = Vector(x, y):withinAABox(Vector(p.x + 100, p.y + 70), Vector(p.x + 120, p.y + 90))
                        Button[103] = Vector(x, y):withinAABox(Vector(p.x + 100, p.y + 105), Vector(p.x + 120, p.y + 125))
                        --2
                        Button[105] = Vector(x, y):withinAABox(Vector(p.x + 215, p.y + 105), Vector(p.x + 235, p.y + 125))
                        Button[106] = Vector(x, y):withinAABox(Vector(p.x + 215, p.y + 70), Vector(p.x + 235, p.y + 90))
                        Button[108] = Vector(x, y):withinAABox(Vector(p.x + 215, p.y + 35), Vector(p.x + 235, p.y + 55))
                    --headers
                        Button[102] = Vector(x, y):withinAABox(Vector(p.x + 0, p.y + 0), Vector(p.x + 250, p.y + 30))
                        Button[104] = Vector(x, y):withinAABox(Vector(p2.x + 0, p2.y + 0), Vector(p2.x + 150, p2.y + 44))
                        Button[107] = Vector(x, y):withinAABox(Vector(p3.x + 56, p3.y + 0), Vector(p3.x + MapSize - 55, p3.y + 30))
                        Button[109] = Vector(x, y):withinAABox(Vector(p4.x + 0, p4.y + 0), Vector(p4.x + 250, p4.y + 30))
                    --map buttons   
                        Button[201] = Vector(x, y):withinAABox(Vector(p3.x + 3, p3.y + 3), Vector(p3.x + 27, p3.y + 27))
                        Button[202] = Vector(x, y):withinAABox(Vector(p3.x + 29, p3.y + 3), Vector(p3.x + 53, p3.y + 27))
                        Button[204] = Vector(x, y):withinAABox(Vector(p3.x + MapSize - 53, p3.y + 3), Vector(p3.x + MapSize - 29, p3.y + 27))
                        Button[203] = Vector(x, y):withinAABox(Vector(p3.x + MapSize - 27, p3.y + 3), Vector(p3.x + MapSize - 3, p3.y + 27))
                    --wall hack settings
                        Button[300] = Vector(x, y):withinAABox(Vector(p.x + 10, p.y + 70), Vector(p.x + 90, p.y + 90))
                        Button[301] = Vector(x, y):withinAABox(Vector(whpos.x + 115, whpos.y + 35), Vector(whpos.x + 135, whpos.y + 55))
                        Button[302] = Vector(x, y):withinAABox(Vector(whpos.x + 115, whpos.y + 70), Vector(whpos.x + 135, whpos.y + 90))
                        Button[303] = Vector(x, y):withinAABox(Vector(whpos.x + 115, whpos.y + 105), Vector(whpos.x + 135, whpos.y + 125))
                        Button[304] = Vector(x, y):withinAABox(Vector(whpos.x + 115, whpos.y + 140), Vector(whpos.x + 135, whpos.y + 160))
                    --cam settings
                        Button[400] = Vector(x, y):withinAABox(Vector(p.x + 10, p.y + 35), Vector(p.x + 90, p.y + 55))
                        Button[401] = Vector(x, y):withinAABox(Vector(campos.x + 175, campos.y + 100), Vector(campos.x + 195, campos.y + 120))
                    --global settings
                        Button[402] = Vector(x, y):withinAABox(Vector(p.x + 65, p.y + 140), Vector(p.x + 185, p.y + 160))
                        Button[403] = Vector(x, y):withinAABox(Vector(globalset.x + 9, globalset.y + 35), Vector(globalset.x + 144, globalset.y + 55))
                    
                
                --base panel
                render.setFont(fontMenu)
                render.setColor(Color(150))
                --render.drawRect(p.x, p.y, 250, panelY)
                render.setMaterial(MapSkin)
                render.drawTexturedRectUV(p.x, p.y, 250, panelY, 0, 0, 0.25, 0.5)
                render.setColor(BaseBlueColor)
                render.drawRectOutline(p.x, p.y, 250, panelY, 1)
                render.setColor(Color(155, 255, 155))
                render.drawText(p.x + 125, p.y + 5, "[AdvancedCamPod] " .. Ver, 1)
                --cam funcs draw
                render.setFont(fontAnother)
                render.setColor(Button[400] and Color(0, 150, 255) or Color(155, 255, 255))
                render.drawText(p.x + 15, p.y + 35, "CamHack", 0)
                render.setColor(Color(200, 200, 200))
                render.drawRect(p.x + 100, p.y + 35, 20, 20)
                render.setColor(Button[400] and Color(200, 150, 75) or Color(100, 75, 25))
                render.drawRectOutline(p.x + 11, p.y + 35, 82, 20, 2)
                if Enable then
                    render.setColor(Color(0, 0, 0))
                    render.drawRect(p.x + 102, p.y + 37, 16, 16)
                end
                --wh funcs draw
                render.setColor(Button[300] and Color(0, 150, 255) or Color(155, 255, 255))
                render.drawText(p.x + 15, p.y + 70, "WallHack", 0)
                render.setColor(Color(200, 200, 200))
                render.drawRect(p.x + 100, p.y + 70, 20, 20)
                render.setColor(Button[300] and Color(200, 150, 75) or Color(100, 75, 25))
                render.drawRectOutline(p.x + 11, p.y + 70, 82, 20, 2)
                if WH then
                    render.setColor(Color(0, 0, 0))
                    render.drawRect(p.x + 102, p.y + 72, 16, 16)
                end
                --key hack funcs draw
                render.setColor(Color(155, 255, 255))
                render.drawText(p.x + 15, p.y + 105, "KeyHack", 0)
                render.setColor(Color(200, 200, 200))
                render.drawRect(p.x + 100, p.y + 105, 20, 20)
                if KH then
                    render.setColor(Color(0, 0, 0))
                    render.drawRect(p.x + 102, p.y + 107, 16, 16)
                end
                --key hack print draw
                render.setColor(Color(155, 255, 255))
                render.drawText(p.x + 135, p.y + 105, "print Keys", 0)
                render.setColor(Color(200, 200, 200))
                render.drawRect(p.x + 215, p.y + 105, 20, 20)
                if KHprint then
                    render.setColor(Color(0, 0, 0))
                    render.drawRect(p.x + 217, p.y + 107, 16, 16)
                end
                --mh funcs draw
                render.setColor(Color(155, 255, 255))
                render.drawText(p.x + 135, p.y + 70, "MapHack", 0)
                render.setColor(Color(200, 200, 200))
                render.drawRect(p.x + 215, p.y + 70, 20, 20)
                if MH then
                    render.setColor(Color(0, 0, 0))
                    render.drawRect(p.x + 217, p.y + 72, 16, 16)
                end
                --armor/health funcs
                render.setColor(Color(155, 255, 255))
                render.drawText(p.x + 135, p.y + 35, "HP/Armor", 0)
                render.setColor(Color(200, 200, 200))
                render.drawRect(p.x + 215, p.y + 35, 20, 20)
                if AH then
                    render.setColor(Color(0, 0, 0))
                    render.drawRect(p.x + 217, p.y + 37, 16, 16)
                end
                --global settings
                render.setFont(fontAnother)
                render.setColor(Button[402] and Color(0, 150, 255) or Color(155, 255, 255))
                render.drawText(p.x + 125, p.y + 140, "Global Settings", 1)
                render.setColor(Button[402] and Color(200, 150, 75) or Color(100, 75, 25))
                render.drawRectOutline(p.x + 65, p.y + 140, 120, 20, 2)
                
                --plys list
                local plys = find.allPlayers()
                local pos = Vector(p.x, p.y + 155)
                render.setFont(fontAnother)
                for i = 1, #plys do
                    
                    Button[i] = Vector(x, y):withinAABox(Vector(pos.x + 5, pos.y + ButtonSize * i), Vector(pos.x + 245, pos.y + ButtonSize * i + ButtonSize - 2))
                    
                    render.setColor(Button[i] and Color(200, 200, 200) or Color(100, 100, 100))
                    render.drawRect(pos.x + 5, pos.y + ButtonSize * i, 240, ButtonSize - 2)
                    render.setColor(Button[i] and team.getColor(plys[i]:getTeam()) or Color(200, 200, 200))
                    render.drawText(p.x + 120, pos.y + ButtonSize * i, string.len(plys[i]:getName()) > 20 and (string.sub(plys[i]:getName(), 1, 25) .. "...") or plys[i]:getName(), 1)
                    
                end
                --Global settings
                if OpenGlobalSettings then
                    render.setColor(Color(150))
                    render.setMaterial(MapSkin)
                    render.drawTexturedRectUV(globalset.x, globalset.y, 150, 200, 0.0, 0.1, 0.2, 0.3)
                    render.setColor(BaseBlueColor)
                    render.drawRectOutline(globalset.x, globalset.y, 150, 200, 1)
                    render.setFont(fontMenu)
                    render.setColor(Color(155, 255, 155))
                    render.drawText(globalset.x + 75, globalset.y, "Global Settings", 1)
                    
                    render.setFont(fontAnother)
                    render.setColor(Color(155, 255, 255))
                    render.drawText(globalset.x + 75, globalset.y + 35, "change MenuKey", 1)
                    render.setColor(Button[403] and Color(200, 150, 75) or Color(100, 75, 25))
                    render.drawRectOutline(globalset.x + 9, globalset.y + 35, 135, 20, 2)
                    render.setFont(fontMap)
                    render.setColor(ChangeMenuKey == false and Color(255, 200, 100) or Color(255, 100, 25))
                    render.drawText(globalset.x + 75, globalset.y + 60, "curent key: [" .. (ChangeMenuKey == false and input.getKeyName(MenuKey) or "...") .. "]", 1)
                    
                    render.setColor(Color(255, 200, 100))
                    render.drawText(globalset.x + 75, globalset.y + 80, "CPU usage: " .. string.sub(tostring(math.max(quotaAverage(), quotaUsed())) * 10000, 0, 5) .. "%", 1)
                    
                    
                    --math.max(quotaAverage(), quotaUsed())
                    
                end
                --CAM settings
                if OpenCAMsettings then
                    render.setFont(fontMenu)
                    render.setColor(Color(150))
                    render.setMaterial(MapSkin)
                    render.drawTexturedRectUV(campos.x, campos.y, 300, 210, 0.0, 0.1, 0.2, 0.3)
                    render.setColor(BaseBlueColor)
                    render.drawRectOutline(campos.x, campos.y, 300, 210, 1)
                    render.setColor(Color(155, 255, 155))
                    render.drawText(campos.x + 150, campos.y, "CamHack settings", 1)
                    render.setFont(fontAnother)
                    render.setColor(Color(255, 200, 100))
                    render.drawText(campos.x + 5, campos.y + 25, "hold [E] while CamHack is on to \nintercept control of the target's \ncamera", 0)
                    
                    render.setColor(Color(155, 255, 255))
                    render.drawText(campos.x + 15, campos.y + 100, "transparent weapon", 0)
                    render.setColor(Color(200, 200, 200))
                    render.drawRect(campos.x + 175, campos.y + 100, 20, 20)
                    if TransparentWeapon then
                        render.setColor(Color(0, 0, 0))
                        render.drawRect(campos.x + 177, campos.y + 102, 16, 16)
                    end
                    
                    render.setColor(Color(155, 255, 255))
                    render.drawText(campos.x + 15, campos.y + 135, "{ mouseWheel } to change zoom [" .. Range .. "]", 0)
                    
                    render.setColor(Color(155, 255, 255))
                    render.drawText(campos.x + 15, campos.y + 170, "{ - | + } to change FOV [" .. FOV .. "]", 0)
                
                end
                --WH settings
                if OpenWHsettings then
                    render.setFont(fontMenu)
                    render.setColor(Color(150))
                    render.setMaterial(MapSkin)
                    render.drawTexturedRectUV(whpos.x, whpos.y, 150, whsettingsY, 0, 0, 0.3, 0.5)
                    render.setColor(BaseBlueColor)
                    render.drawRectOutline(whpos.x, whpos.y, 150, whsettingsY, 1)
                    render.setColor(Color(155, 255, 155))
                    render.drawText(whpos.x + 75, whpos.y, "WH settings", 1)
                    render.setFont(fontAnother)
                    
                    render.setColor(Color(155, 255, 255))
                    render.drawText(whpos.x + 15, whpos.y + 35, "name", 0)
                    render.setColor(Color(200, 200, 200))
                    render.drawRect(whpos.x + 115, whpos.y + 35, 20, 20)
                    if WHname then
                        render.setColor(Color(0, 0, 0))
                        render.drawRect(whpos.x + 117, whpos.y + 37, 16, 16)
                    end
                    render.setColor(Color(155, 255, 255))
                    render.drawText(whpos.x + 15, whpos.y + 70, "3D box", 0)
                    render.setColor(Color(200, 200, 200))
                    render.drawRect(whpos.x + 115, whpos.y + 70, 20, 20)
                    if WHbox then
                        render.setColor(Color(0, 0, 0))
                        render.drawRect(whpos.x + 117, whpos.y + 72, 16, 16)
                    end
                    render.setColor(Color(155, 255, 255))
                    render.drawText(whpos.x + 15, whpos.y + 105, "AimBeam", 0)
                    render.setColor(Color(200, 200, 200))
                    render.drawRect(whpos.x + 115, whpos.y + 105, 20, 20)
                    if WHbeam then
                        render.setColor(Color(0, 0, 0))
                        render.drawRect(whpos.x + 117, whpos.y + 107, 16, 16)
                    end
                    render.setColor(Color(155, 255, 255))
                    render.drawText(whpos.x + 15, whpos.y + 140, "2D box", 0)
                    render.setColor(Color(200, 200, 200))
                    render.drawRect(whpos.x + 115, whpos.y + 140, 20, 20)
                    if WHbox2D then
                        render.setColor(Color(0, 0, 0))
                        render.drawRect(whpos.x + 117, whpos.y + 142, 16, 16)
                    end
                end

            end
            
            --WH
            if WH then
                render.setFont(FontName)
                local plys = find.allPlayers()
                for i = 1, #plys do
                    local ply = plys[i]
                    local obb = ply:obbSize()
                    local dist = Ply:getPos():getDistance(ply:getPos())
                    
                    if    
                        (Ply != ply and Enable)
                        or
                        (owner() != ply and not Enable)
                    
                    then
                        --draw name
                        if WHname and dist > 500 then
                            local pos = (ply:getPos() + Vector(0, 0, obb[3])):toScreen()
                            render.setColor(team.getColor(ply:getTeam()))
                            render.drawSimpleText(pos.x, pos.y - 20, ply:getName(), 1)
                        end
                        --draw 2D box
                        if WHbox2D then
                            local size = math.max(10, 25 - dist / 500)
                            local pos = (ply:getAttachment(ply:lookupAttachment("chest")) or ply:getPos()):toScreen()
                            render.setColor(team.getColor(ply:getTeam()))
                            render.drawRect(pos.x, pos.y, size, size)
                        end
                    end
                    
                end
                
                
            end
            
            --key hack active
            if KH then
                
                if Ply == nil or not Ply:isValid() then
                    Ply = owner() 
                end
                
                local panelY2 = 50 + (KeyLog[Ply:getSteamID()] != nil and table.count(KeyLog[Ply:getSteamID()]) or 0) * 16
                if Hold2 == 1 then
                    local x, y = input.getCursorPos()
                    p2 = Vector(x, y) + Poser2
                end
                
                render.setFont(fontMenu)
                render.setColor(Color(150, 150, 150))
                render.setMaterial(MapSkin)
                render.drawTexturedRectUV(p2.x, p2.y, 150, panelY2, 0.1, 0.1, 0.45, 0.45)
                render.setColor(BaseBlueColor)
                render.drawRectOutline(p2.x, p2.y, 150, panelY2, 1)
                render.setColor(Color(155, 255, 155))
                render.drawText(p2.x + 75, p2.y + 0, "pressed keys", 1)
                render.setColor(Color(155, 255, 255))
                render.drawText(p2.x + 75, p2.y + 20, string.sub(Ply:getName(), 1, 20), 1) 
                
                local id = Ply:getSteamID()
                render.setFont(fontAnother)
                --draw pressed keys if exists
                if KeyLog[id] != nil then
                    for i = 1, table.count(KeyLog[id]) do
                        local str = table.getKeys(KeyLog[id])[i]
                        local num = KeyLog[id][str].num
                        local clr = KeyLog[id][str].clr
                        
                        render.setColor(clr)
                        render.drawText(p2.x + 5, p2.y + 28 + i * 16, (str or nil) .. " : ", 0)
                        render.setColor(Color(255, 255, 100))
                        render.drawText(p2.x + 110, p2.y + 28 + i * 16, tostring(num), 0)
                        
                    end
                end
                
            end
            
            --map hack active
            if MH then
                
                    local x, y = input.getCursorPos()
                    
                    if Hold3 == 1 then
                        p3 = Vector(x, y) + Poser3
                    end
                    
                    DrawPos = p3
                --draw map
                    --setup stencil
                    resetStencil()
                    
                    render.setColor(BaseBlueColor)
                    render.drawFilledCircle(DrawPos.x + MapSize / 2, DrawPos.y + 30 + MapSize / 2, MapSize / 2)
                    
                    if Show then
                        render.setColor(Color(200, 200, 200))
                        render.setMaterial(MapSkin)
                        render.drawTexturedRectUV(DrawPos.x, DrawPos.y + 30, MapSize, MapSize, 0, 0, 0.5, 0.5)
                    end
                    
                    render.setStencilEnable(true)
                    render.setStencilReferenceValue(1)
                    render.setStencilCompareFunction(STENCIL.EQUAL)
                    render.setStencilFailOperation(STENCIL.REPLACE)
                    render.clearBuffersObeyStencil(128, 0, 255, 255, false)
                    render.clearStencil()
                    
                    --draw base cirlce
                    render.drawFilledCircle(DrawPos.x + MapSize / 2, DrawPos.y + 30 + MapSize / 2, MapSize / 2 - 2)
                    
                    local plypos = Vector(scrnsize.x, scrnsize.y) - (Ply:getPos() / 13248 * MapSize / 2):setZ(0) * Vector(-1, 1) / (MapSize * 2)             
                    
                    local mtx = Matrix()
                    mtx:setTranslation(Vector(DrawPos.x+ MapSize / 2, DrawPos.y + MapSize / 2 + 30, 0))
                    mtx:setAngles(Angle(0, Ply:getEyeAngles()[2] - 90, 0))
                    
                    local imgposes = {
                        x1 = 0.25 + plypos.x - DrawedScale / 2,
                        y1 = 0.25 + plypos.y - DrawedScale / 2,
                        x2 = 0.25 + plypos.x + DrawedScale / 2,
                        y2 = 0.25 + plypos.y + DrawedScale / 2,    
                    }
                    
                    render.setColor(Color(255, 255, 255))
                    render.setMaterial(Map)
                    render.pushMatrix(mtx)
                        render.drawTexturedRectUV(-MapSize, -MapSize, MapSize * 2, MapSize * 2, imgposes.x1, imgposes.y1, imgposes.x2, imgposes.y2)
                    render.popMatrix()
                    render.setStencilEnable(false)
                    
                    if Show then
                        render.setColor(BaseBlueColor)
                        render.drawRectOutline(DrawPos.x, DrawPos.y + 30, MapSize, MapSize, 1)
                        render.setColor(Color(50, 50, 50))
                        render.drawRect(DrawPos.x, DrawPos.y, MapSize, 30)
                        render.setColor(BaseBlueColor)
                        render.drawRectOutline(DrawPos.x, DrawPos.y, MapSize, 30, 1)
                        
                        render.setFont(fontMenu)
                        render.setColor(Color(200, 200, 200))
                        render.drawRect(DrawPos.x + 3, DrawPos.y + 3, 24, 24)
                        render.drawRect(DrawPos.x + 29, DrawPos.y + 3, 24, 24)
                        render.setColor(Color(0, 0, 0))
                        render.drawText(DrawPos.x + 9, DrawPos.y + 2, "+", 0)
                        render.drawText(DrawPos.x + 35, DrawPos.y + 2, "-", 0)
                        render.setColor(Color(155, 255, 155))
                        render.drawText(DrawPos.x + 56, DrawPos.y + 2, "size", 0)
                        
                        render.setColor(Color(200, 200, 200))
                        render.drawRect(DrawPos.x + MapSize - 27, DrawPos.y + 3, 24, 24)
                        render.drawRect(DrawPos.x + MapSize - 53, DrawPos.y + 3, 24, 24)
                        render.setColor(Color(0, 0, 0))
                        render.drawText(DrawPos.x + MapSize - 21, DrawPos.y + 2, "-", 0)
                        render.drawText(DrawPos.x + MapSize - 47, DrawPos.y + 2, "+", 0)
                        render.setColor(Color(155, 255, 155))
                        render.drawText(DrawPos.x + MapSize - 55, DrawPos.y + 2, "zoom", 2)
                    end
                
                    --draw Me
                    render.setFont(fontMap)
                    render.setColor(Color(255, 255, 255))
                        local poly = {
                            {x=DrawPos.x + MapSize / 2 + 0, y=DrawPos.y + MapSize / 2 + 30 - 2},
                            {x=DrawPos.x + MapSize / 2 + 4, y=DrawPos.y + MapSize / 2 + 30 + 6},
                            {x=DrawPos.x + MapSize / 2 - 4, y=DrawPos.y + MapSize / 2 + 30 + 6}, 
                        }
                    render.drawPoly(poly)
                    render.setColor(team.getColor(Ply:getTeam()))
                    render.drawText(DrawPos.x + MapSize / 2 + 0, DrawPos.y + MapSize / 2 + 30 + 7, Ply:getName(), 1)
                    
                    local plys = find.allPlayers()
                    for i = 1, #plys do
                        if plys[i] != Ply then 
                            local dist = Ply:getPos():setZ(0):getDistance(plys[i]:getPos():setZ(0)) / 13248 * (MapSize / 2 / DrawedScale)
                            local ang = (Ply:getPos() - plys[i]:getPos()):getAngle().yaw - Ply:getEyeAngles().yaw
                            local pos = Vector(DrawPos.x + MapSize / 2, DrawPos.y + MapSize / 2 + 30) + Vector(math.sin(math.rad(ang)), math.cos(math.rad(ang)), 0) * dist
                            local z 
                                if (Ply:getPos().z - plys[i]:getPos().z) > 100 then
                                    z = Str[2]
                                elseif (Ply:getPos().z - plys[i]:getPos().z) < -100 then
                                    z = Str[1]
                                else
                                    z = Str[3]
                                end
                            
                            if pos:withinAABox(Vector(DrawPos.x, DrawPos.y + 28), Vector(DrawPos.x + MapSize, DrawPos.y + MapSize + 30)) then
                            
                                render.setColor(team.getColor(plys[i]:getTeam()))
                                render.setFont(fontMap)
                                render.drawText(pos.x, pos.y - 2, z .. "\n" .. plys[i]:getName(), 1)
                                
                            end
                        end
                        
                    end

                    

            end
            
            --armor/health hack
            if AH then
                
                if Ply == nil or not Ply:isValid() then
                    Ply = owner() 
                end
                
                if Ply == owner() then return end
                
                if Hold4 == 1 then
                    local x, y = input.getCursorPos()
                    p4 = Vector(x, y) + Poser4
                end
                
                render.setFont(fontMenu)
                render.setColor(Color(75, 75, 75))
                render.setMaterial(MapSkin)
                render.drawTexturedRectUV(p4.x, p4.y, 250, 30, 0.1, 0.2, 0.25, 0.25)
                render.setColor(Color(0, 125, 255))
                render.drawRectOutline(p4.x, p4.y, 250, 30, 1)
                render.setColor(Color(255, 100, 100))
                render.drawText(p4.x + 2, p4.y + 2, "[HP]: " .. Ply:getHealth(), 0) 
                render.setColor(Color(100, 100, 255))
                render.drawText(p4.x + 248, p4.y + 2, " [AR]: " .. Ply:getArmor(), 2) 
              
            end
            
        end)
                
        hook.add("inputPressed", "", function(key)
            if ChangeMenuKey == true then
                
                if key != 107 and key != 36  and key != 70 then
                    MenuKey = key 
                    ChangeMenuKey = false
                    savePoses()
                end
                
            elseif key == MenuKey then
                
                Show = not Show
                input.enableCursor(Show)
                
            elseif key == 112 and Enable == true  and Show == true then
                
                Range = Range + 1
                savePoses()
                
            elseif key == 113 and Enable == true  and Show == true then
                
                Range = Range - 1
                savePoses()
            
            elseif key == 62 and Enable == true  and Show == true then
                
                FOV = FOV - 5
                savePoses()
                
            elseif key == 63 and Enable == true  and Show == true then
                
                FOV = FOV + 5
                savePoses()
                
            elseif key == 15 and Enable then
            
                net.start("e")
                net.writeTable({e = 1})
                net.send(owner())
            
            elseif key == 107 and Show then
                
                if Button[100] then
                    Enable = not Enable
                    
                    net.start("enable")
                    net.writeTable({enable = Enable, entity = Ply})
                    net.send(owner())
                    
                elseif Button[101] then
                    WH = not WH
                elseif Button[102] then
                    Hold = Hold + 1 
                    local x, y = input.getCursorPos()
                    Poser = p - Vector(x, y)
                elseif Button[104] then
                    Hold2 = Hold2 + 1 
                    local x, y = input.getCursorPos()
                    Poser2 = p2 - Vector(x, y)
                elseif Button[103] then
                    KH = not KH
                elseif Button[105] then
                    KHprint = not KHprint
                elseif Button[106] then
                    MH = not MH
                elseif Button[107] then
                    Hold3 = Hold3 + 1
                    local x, y = input.getCursorPos()
                    Poser3 = p3 - Vector(x, y) 
                elseif Button[108] then
                    AH = not AH
                elseif Button[109] then
                    Hold4 = Hold4 + 1
                    local x, y = input.getCursorPos()
                    Poser4 = p4 - Vector(x, y) 
                elseif Button[201] and MH then
                    MapSize = math.min(MapSize + 10, Resolution.y - 30)
                    savePoses()
                elseif Button[202] and MH then
                    MapSize = math.max(MapSize - 10, 250)
                    savePoses()
                elseif Button[203] and MH then
                    DrawedScale = math.min(DrawedScale + 0.01, 0.5)
                    savePoses()
                elseif Button[204] and MH then
                    DrawedScale = math.max(DrawedScale - 0.01, 0.1)
                    savePoses()
                elseif Button[300] then
                    OpenWHsettings = not OpenWHsettings
                elseif Button[400] then
                    OpenCAMsettings = not OpenCAMsettings
                elseif Button[401] then
                    TransparentWeapon = not TransparentWeapon
                elseif Button[402] then
                    OpenGlobalSettings = not OpenGlobalSettings
                elseif Button[403] then
                    ChangeMenuKey = not ChangeMenuKey
                elseif Button[301] then
                    WHname = not WHname
                    savePoses()
                elseif Button[302] then
                    WHbox = not WHbox
                    if WHbox == true then WHbox2D = false end
                    savePoses()
                elseif Button[303] then
                    WHbeam = not WHbeam
                    savePoses()
                elseif Button[304] then
                    WHbox2D = not WHbox2D
                    if WHbox2D == true then WHbox = false end
                    savePoses()
                else
                    local plys = find.allPlayers()
                    for i = 1, #plys do
                        if Button[i] then
                            Ply:setColor(Color(255, 255, 255, 255))
                            Ply = plys[i]
                            net.start("enable")
                            net.writeTable({entity = Ply})
                            net.send(owner())
                        end 
                    end
                    
                end
            end   
        end)
        hook.add("inputReleased", "", function(key)
            if key == 107 then
                
                Hold = 0
                Hold2 = 0
                Hold3 = 0
                Hold4 = 0
                savePoses()
                Poser = Vector(0)
                
            elseif key == 15 and Enable then
            
                net.start("e")
                net.writeTable({e = 0})
                net.send(owner())
                
            end
        end)
        hook.add("Removed", "", function()
            local plys = find.allPlayers()
            for i = 1, #plys do
                plys[i]:setColor(Color(255, 255, 255, 255))
            end
        end)
    else
        hook.add("inputPressed", "", function(key)
            if 
                (key > 36 and key < 70) or
                (key > 70 and key < 79) or
                (key > 91 and key < 104)
            then
                net.start("sendOnServer")
                net.writeTable({ent = player(), key = "_" .. tostring(key)})
                net.send(owner())
            end
        end)
    end
end
